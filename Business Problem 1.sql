--view all data from tables
SELECT * FROM Orders;
SELECT * FROM Customers;
SELECT * FROM Returns;
SELECT * FROM Products;
SELECT * FROM Sellers;
--1. What is the total sales revenue generated by each state?
SELECT State,
	   SUM(sale) as Revenue
FROM Orders
GROUP BY State
ORDER BY Revenue DESC;

--2. How many orders were placed by each customer, and what is their average order quantity?
--we will print the customer details hence need to join Orders with Customer table
SELECT 
	o.customer_id, 
	c.customer_name,
	AVG (Quantity) as AVG_qty
FROM Orders o
JOIN 
Customers c 
ON o.customer_id = c.customer_id
GROUP BY 1,2
ORDER BY AVG_qty DESC;

--3. Which category has the highest average sale amount per order?
SELECT 
	order_id, 
	Category,
	Avg(sale)
FROM Orders
GROUP BY 1,2
ORDER BY 3 DESC
LIMIT 1;

--4. Identify the top 3 best-selling products (sub-categories) in terms of total quantity sold.
SELECT Product_id,
	Sub_Category,
	sum(quantity)
FROM Orders
GROUP BY 1,2
ORDER by 3 DESC
LIMIT 3;


--5. Which is the best selling month in 2022 based on revenue?
SELECT 
	EXTRACT(MONTH FROM Order_date ) as Months,
	MAX(sale)

FROM Orders
WHERE EXTRACT(YEAR FROM Order_date)= '2022'
GROUP BY 1
ORDER BY 2 DESC
LIMIT 1;

--6. Identify all orders that have been returned, along with the details of the returns (if available)
SELECT o.order_id, 
	r.return_id,
	c.customer_id, 
	c.customer_name,COUNT(*) as total_returns
FROM Returns r
 JOIN
Orders o
ON o.order_id = r.order_id
JOIN Customers c
ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.customer_name,o.order_id,r.return_id
ORDER BY total_returns DESC

--7. Find all instances where products have been sold, returned, or both, along with the associated details
SELECT o.order_id, 
	r.return_id,
	c.customer_id, 
	c.customer_name,COUNT(*) as total_returns
FROM Returns r
 JOIN
Orders o
ON o.order_id = r.order_id
RIGHT JOIN Customers c
ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.customer_name,o.order_id,r.return_id
ORDER BY total_returns DESC

--8. Find total count of orders and total sales by each seller_id
SELECT 
	--o.order_id,
	seller_id,
	count(order_id) AS total_order_by_seller,
	sum (sale) AS total_sales_by_seller
FROM Orders 
GROUP BY seller_id


--9. Find top 3 states and revenue generated Having revenue > 30000
SELECT State, sum(sale)
FROM Orders
GROUP BY State
having sum(sale) > 30000
ORDER BY 2 DESC
--limit 3

--to find second highest revenue sate 
SELECT State ,sum(sale) as total
FROM Orders 
GROUP BY State
HAVING sum(sale) <
	(SELECT sum(sale)
	FROM Orders
	GROUP BY State
	ORDER BY 1 DESC
	LIMIT 1)
ORDER BY total DESC
limit 1

--10.  Ranking Top 5 Products by Sales: 
--M1 - using window function
SELECT * 
FROM (
	SELECT
		Product_id,
		Sum(sale),
		RANK () OVER (ORDER BY Sum(sale) DESC) AS r
	FROM orders
	GROUP BY 1
	
	)
WHERE r =2;

-- M2 using group by 
SELECT
	Product_id,
	Sum(sale)
FROM orders
GROUP BY 1
ORder BY 2 DESC
LIMIT 5;

--SELECT Distinct product_id FROM orders

-- 11. first product by sale 
SELECT Product_id,
	SUM(Sale)
FROM Orders
GROUP BY Product_id 
ORDER BY SUM(Sale) DESC
LIMIT 1 ;


--12. find 2nd highest product by sale
-- rank window function 
SELECT *
FROM(
	SELECT 
		PRODUCT_ID,
		sum(SALE),
		rank() over (order by sum(sALE)) as rn
	FROM Orders
	GROUP BY Product_id
	)
WHERE rn =2

--subqury only no window
SELECT Product_id,
	SUM(Sale)
FROM Orders
GRoup by 1
HAving SUM(Sale) <	(
	SELECT 
		SUM(Sale)
	FROM Orders
	GROUP BY Product_id 
	ORDER BY SUM(Sale) DESC
	LIMIT 1 
	)
ORDER BY 2 DESC
LIMIT 1 ;
